name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: starwars_user
          POSTGRES_PASSWORD: starwars_password
          POSTGRES_DB: starwars_db
        ports: [5432:5432]
        options: >-
          --health-cmd="pg_isready -U starwars_user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:7
        ports: [6379:6379]
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend cache and install
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        working-directory: backend

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install backend dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader
        working-directory: backend

      # Backend test
      - name: Run backend tests
        run: php artisan test
        working-directory: backend
        env:
          DB_CONNECTION: pgsql
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: starwars_db
          DB_USERNAME: starwars_user
          DB_PASSWORD: starwars_password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379

      # Frontend cache and install
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
        working-directory: frontend

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: npm install
        working-directory: frontend

      # Frontend build
      - name: Build frontend
        run: npm run build
        working-directory: frontend
